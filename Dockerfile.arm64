FROM node:20-bullseye-slim AS builder

# Install dependencies for building native modules
RUN apt-get update && apt-get install -y \
    python3 \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20-bullseye-slim AS production

# Install required libraries for ARM64 and ONNX runtime
RUN apt-get update && apt-get install -y \
    libc6 \
    libstdc++6 \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Set environment variables
ENV NODE_ENV=production

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev

# Copy build artifacts from builder stage
COPY --from=builder /app/dist ./dist
COPY .env* ./

# Create volume for Redis data
VOLUME /data

# Copy startup script 
COPY docker-startup-arm64.sh ./docker-startup.sh
RUN chmod +x docker-startup.sh

# Expose Redis and app ports
EXPOSE 6379
EXPOSE 3000

# Use the startup script as entrypoint
ENTRYPOINT ["./docker-startup.sh"]
